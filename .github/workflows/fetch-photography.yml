name: Fetch Photography Widget (daily)

permissions:
  contents: read

on:
  schedule:
    # Runs every day at 08:00 UTC (adjust as desired)
    - cron: '0 8 * * *'
  workflow_dispatch:

jobs:
  update-photography:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      # 2) Fetch a single random Unsplash photo (using a "topic" if desired)
      - name: Fetch daily photo from Unsplash
        env:
          KEY: ${{ secrets.UNSPLASH_KEY }}
        run: |
          # You can narrow by topic, e.g. &topics=editorial in the URL. Here we fetch truly random:
          curl -s \
            "https://api.unsplash.com/photos/random?orientation=landscape&client_id=$KEY" \
            > raw_photo.json

      # 3) Trim to only the fields we need: id, urls.small (thumbnail), urls.full, user.name, alt_description
      - name: Trim Unsplash response
        run: |
          node <<'NODE'
          const fs = require('fs');

          let src;
          try {
            src = JSON.parse(fs.readFileSync('raw_photo.json', 'utf8'));
          } catch (err) {
            console.error('⚠️ Invalid JSON from Unsplash:', err.message);
            process.exit(0); // skip if invalid
          }

          // If Unsplash returned an error (e.g. rate-limit), bail out:
          if (src.errors || src.status === 403 || !src.id) {
            console.error('⚠️ Unsplash returned an error:', JSON.stringify(src).slice(0, 200));
            process.exit(0);
          }

          const out = {
            id: src.id,
            thumbnail: src.urls.small,   // ~400px-wide thumbnail
            full: src.urls.full,         // full-resolution URL
            photographer: src.user.name, // name to credit
            profile: src.user.links.html, // link to photographer’s Unsplash profile
            alt: src.alt_description || '', // alt text (may be null)
            createdAt: src.created_at,      // e.g. "2023-10-07T12:34:56Z"
          };

          fs.writeFileSync('photography.json', JSON.stringify(out, null, 2));
          NODE


      - name: Push to MongoDB (photography)
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          MONGODB_DB: ${{ secrets.MONGODB_DB }}
        run: |
          node --loader ts-node/esm --experimental-specifier-resolution=node scripts/push-to-mongo.ts \
            --file photography.json --singleton photography
